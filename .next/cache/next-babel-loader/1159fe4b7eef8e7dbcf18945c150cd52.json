{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState } from 'react';\n\nconst useInputState = init => {\n  const {\n    0: newValue,\n    1: setValue\n  } = useState(init);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValue(prev => _objectSpread({}, prev, {\n      [name]: value\n    }));\n  };\n\n  const reset = () => {\n    setValue(init);\n  };\n\n  return [newValue, handleChange, reset];\n};\n\nexport default useInputState;","map":{"version":3,"sources":["C:/Users/domin/Documents/domcattell/site/hooks/useInputState.js"],"names":["useState","useInputState","init","newValue","setValue","handleChange","e","name","value","target","prev","reset"],"mappings":";;;;;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;;AAEA,MAAMC,aAAa,GAAIC,IAAD,IAAU;AAC5B,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAAuBJ,QAAQ,CAACE,IAAD,CAArC;;AAEA,QAAMG,YAAY,GAAIC,CAAD,IAAO;AACxB,UAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP,QAAgBF,CAAC,CAACG,MAAxB;AACAL,IAAAA,QAAQ,CAACM,IAAI,sBACNA,IADM;AAET,OAACH,IAAD,GAAQC;AAFC,MAAL,CAAR;AAIH,GAND;;AAQA,QAAMG,KAAK,GAAG,MAAM;AAChBP,IAAAA,QAAQ,CAACF,IAAD,CAAR;AACH,GAFD;;AAIA,SAAO,CAACC,QAAD,EAAWE,YAAX,EAAyBM,KAAzB,CAAP;AACH,CAhBD;;AAkBA,eAAeV,aAAf","sourcesContent":["import {useState} from 'react';\r\n\r\nconst useInputState = (init) => {\r\n    const [newValue, setValue] = useState(init);\r\n\r\n    const handleChange = (e) => {\r\n        const {name, value} = e.target;\r\n        setValue(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const reset = () => {\r\n        setValue(init);\r\n    };\r\n    \r\n    return [newValue, handleChange, reset];\r\n}\r\n\r\nexport default useInputState;"]},"metadata":{},"sourceType":"module"}