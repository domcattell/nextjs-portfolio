{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useContext, useEffect } from 'react';\nimport { Form, Modal, Button, Container, Row, Col } from 'react-bootstrap';\nimport { ProjectsActions, ProjectsContext } from '../../../context/contexts/projects.context';\nimport useInputState from '../../../hooks/useInputState';\nimport TextEditor from '../Utils/TextEditor';\n\nvar EditProject = function EditProject(props) {\n  var _useInputState = useInputState(''),\n      _useInputState2 = _slicedToArray(_useInputState, 5),\n      projectDetails = _useInputState2[0],\n      handleChange = _useInputState2[1],\n      handleDesc = _useInputState2[2],\n      fileChange = _useInputState2[3],\n      resetForm = _useInputState2[4];\n\n  var _useContext = useContext(ProjectsActions),\n      editProject = _useContext.editProject,\n      getProject = _useContext.getProject,\n      clearProjectMsg = _useContext.clearProjectMsg,\n      clearProject = _useContext.clearProject,\n      loadingProject = _useContext.loadingProject;\n\n  var _useContext2 = useContext(ProjectsContext),\n      project = _useContext2.project;\n  /**\r\n   * two @useEffect hooks here. \r\n   * the first is to fetch the initial data, only on mount, and then do cleanup on close\r\n   * second hook is to prefill the @useInputState hook with the fetched data. this re renders\r\n   * when the @project state changes, and fills in the form with data\r\n   */\n\n\n  useEffect(function () {\n    loadingProject();\n    getProject(props.url);\n    return function () {\n      clearProject();\n      clearProjectMsg();\n    };\n  }, [props.url]);\n  useEffect(function () {\n    resetForm(project);\n  }, [project]);\n\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    var form_data = new FormData(EditProjectForm);\n    form_data.set('description', projectDetails.description);\n    form_data.set('imageName', projectDetails.imageName);\n    editProject(props.url, form_data);\n    console.log(form_data);\n  };\n\n  return __jsx(Modal, {\n    size: \"lg\",\n    show: props.show,\n    onHide: props.toggle,\n    centered: true\n  }, __jsx(Modal.Header, {\n    closeButton: true\n  }, __jsx(Modal.Title, {\n    id: \"new-project\"\n  }, \"Edit \", props.title)), __jsx(Modal.Body, null, __jsx(Container, null, __jsx(Form, {\n    id: \"EditProjectForm\",\n    onSubmit: handleSubmit\n  }, __jsx(Form.Group, null, __jsx(Form.Control, {\n    name: \"title\",\n    value: projectDetails.title || '',\n    onChange: handleChange,\n    type: \"text\"\n  })), __jsx(Form.Group, null, __jsx(Form.Control, {\n    name: \"code\",\n    value: projectDetails.code || '',\n    onChange: handleChange,\n    type: \"text\",\n    placeholder: \"\"\n  })), __jsx(Form.Group, null, __jsx(Form.Control, {\n    name: \"demo\",\n    value: projectDetails.demo || '',\n    onChange: handleChange,\n    type: \"text\",\n    placeholder: \"\"\n  })), __jsx(Form.Group, null, __jsx(TextEditor, {\n    value: projectDetails.description || '',\n    onChange: handleDesc\n  })), __jsx(Form.Group, null, __jsx(Row, {\n    noGutters: true\n  }, __jsx(Col, null, __jsx(Button, {\n    variant: \"primary\",\n    type: \"submit\"\n  }, \"Save Changes\")), __jsx(Col, null, __jsx(Form.File, {\n    id: \"formcheck-api-custom\",\n    custom: true\n  }, __jsx(Form.File.Input, {\n    accept: \".jpg,.jpeg,.png\",\n    name: \"projectImg\",\n    onChange: fileChange\n  }), __jsx(Form.File.Label, {\n    \"data-browse\": \"Upload Image\"\n  }, projectDetails.projectImg !== project.projectImg ? 'Replaced Image' : 'Replace Image')))))))));\n};\n\nexport default EditProject;","map":{"version":3,"sources":["C:/users/domin/documents/domcattell/site/components/admin/Modals/EditProject.js"],"names":["React","useContext","useEffect","Form","Modal","Button","Container","Row","Col","ProjectsActions","ProjectsContext","useInputState","TextEditor","EditProject","props","projectDetails","handleChange","handleDesc","fileChange","resetForm","editProject","getProject","clearProjectMsg","clearProject","loadingProject","project","url","handleSubmit","e","preventDefault","form_data","FormData","EditProjectForm","set","description","imageName","console","log","show","toggle","title","code","demo","projectImg"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { Form, Modal, Button, Container, Row, Col } from 'react-bootstrap';\r\nimport { ProjectsActions, ProjectsContext } from '../../../context/contexts/projects.context';\r\nimport useInputState from '../../../hooks/useInputState';\r\nimport TextEditor from '../Utils/TextEditor';\r\n\r\nconst EditProject = (props) => {\r\n\tconst [ projectDetails, handleChange, handleDesc, fileChange, resetForm ] = useInputState('');\r\n\r\n\tconst { editProject, getProject, clearProjectMsg, clearProject, loadingProject } = useContext(ProjectsActions);\r\n\tconst { project } = useContext(ProjectsContext);\r\n\r\n\t/**\r\n\t * two @useEffect hooks here. \r\n\t * the first is to fetch the initial data, only on mount, and then do cleanup on close\r\n\t * second hook is to prefill the @useInputState hook with the fetched data. this re renders\r\n\t * when the @project state changes, and fills in the form with data\r\n\t */\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tloadingProject();\r\n\t\t\tgetProject(props.url);\r\n\t\t\treturn () => {\r\n\t\t\t\tclearProject();\r\n\t\t\t\tclearProjectMsg();\r\n\t\t\t};\r\n\t\t},\r\n\t\t[ props.url ]\r\n\t);\r\n\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tresetForm(project);\r\n\t\t},\r\n\t\t[ project ]\r\n\t);\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tconst form_data = new FormData(EditProjectForm);\r\n\t\tform_data.set('description', projectDetails.description);\r\n\t\tform_data.set('imageName', projectDetails.imageName);\r\n\t\teditProject(props.url, form_data);\r\n\t\tconsole.log(form_data);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Modal size=\"lg\" show={props.show} onHide={props.toggle} centered>\r\n\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t<Modal.Title id=\"new-project\">Edit {props.title}</Modal.Title>\r\n\t\t\t</Modal.Header>\r\n\t\t\t<Modal.Body>\r\n\t\t\t\t<Container>\r\n\t\t\t\t\t<Form id=\"EditProjectForm\" onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\t\tvalue={projectDetails.title || ''}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tname=\"code\"\r\n\t\t\t\t\t\t\t\tvalue={projectDetails.code || ''}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<Form.Control\r\n\t\t\t\t\t\t\t\tname=\"demo\"\r\n\t\t\t\t\t\t\t\tvalue={projectDetails.demo || ''}\r\n\t\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<TextEditor value={projectDetails.description || ''} onChange={handleDesc} />\r\n\t\t\t\t\t\t</Form.Group>\r\n\r\n\t\t\t\t\t\t<Form.Group>\r\n\t\t\t\t\t\t\t<Row noGutters>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\t\t\t\t\tSave Changes\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t\t<Col>\r\n\t\t\t\t\t\t\t\t\t<Form.File id=\"formcheck-api-custom\" custom>\r\n\t\t\t\t\t\t\t\t\t\t<Form.File.Input\r\n\t\t\t\t\t\t\t\t\t\t\taccept=\".jpg,.jpeg,.png\"\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"projectImg\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={fileChange}\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t<Form.File.Label data-browse=\"Upload Image\">\r\n\t\t\t\t\t\t\t\t\t\t\t{projectDetails.projectImg !== project.projectImg ? (\r\n\t\t\t\t\t\t\t\t\t\t\t\t'Replaced Image'\r\n\t\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t\t'Replace Image'\r\n\t\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t\t</Form.File.Label>\r\n\t\t\t\t\t\t\t\t\t</Form.File>\r\n\t\t\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t\t\t</Row>\r\n\t\t\t\t\t\t</Form.Group>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t</Container>\r\n\t\t\t</Modal.Body>\r\n\t\t</Modal>\r\n\t);\r\n};\r\n\r\nexport default EditProject;\r\n"]},"metadata":{},"sourceType":"module"}