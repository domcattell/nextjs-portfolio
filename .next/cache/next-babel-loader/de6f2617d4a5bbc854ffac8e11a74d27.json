{"ast":null,"code":"var _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar express = require('express'),\n    router = express.Router({\n  mergeParams: true\n}),\n    user = require('../models/user'),\n    bcrypt = require('bcrypt'),\n    jwt = require('jsonwebtoken'),\n    checkAuth = require('../middleware/checkAuth');\n\nvar secret = 'secret';\nrouter.post('/admin/login', function _callee(req, res) {\n  var _req$body, username, password, loginUser, matched, payload, token;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _req$body = req.body, username = _req$body.username, password = _req$body.password;\n          _context.prev = 1;\n\n          if (!(!username || !password)) {\n            _context.next = 4;\n            break;\n          }\n\n          throw Error('Please enter the fields');\n\n        case 4:\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(user.findOne({\n            username: username\n          }));\n\n        case 6:\n          loginUser = _context.sent;\n\n          if (loginUser) {\n            _context.next = 9;\n            break;\n          }\n\n          throw Error('user not found');\n\n        case 9:\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(bcrypt.compare(password, loginUser.password));\n\n        case 11:\n          matched = _context.sent;\n\n          if (matched) {\n            _context.next = 14;\n            break;\n          }\n\n          throw Error('incorrect credentials');\n\n        case 14:\n          //assign token and expiration date\n          payload = {\n            username: username\n          };\n          token = jwt.sign(payload, secret, {\n            expiresIn: '60m'\n          });\n\n          if (token) {\n            _context.next = 18;\n            break;\n          }\n\n          throw Error('token error');\n\n        case 18:\n          //send token as json to be used for auth in client\n          res.status(200).json(token);\n          _context.next = 25;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](1);\n          res.status(400).json({\n            msg: _context.t0.message\n          });\n          console.log(_context.t0.message);\n\n        case 25:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[1, 21]], Promise);\n});\nrouter.get('/admin/user', checkAuth, function _callee2(req, res) {\n  var username, loggedInUser;\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          username = req.username;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(user.findOne({\n            username: username\n          }).select('-password'));\n\n        case 4:\n          loggedInUser = _context2.sent;\n\n          if (loggedInUser) {\n            _context2.next = 7;\n            break;\n          }\n\n          throw Error(\"User not found\");\n\n        case 7:\n          res.status(200).json(username);\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](1);\n          res.status(400).json({\n            msg: \"error\"\n          });\n          console.log(_context2.t0);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[1, 10]], Promise);\n}); //register route. won't be used, and thus no error handling added\n// router.post(\"/admin/register\", async (req, res) => {\n//     const {username, password} = req.body;\n//     try {\n//         const salt = await bcrypt.genSalt(10);\n//         const hash = await bcrypt.hash(password, salt);\n//         const newUser = new user({\n//             username,\n//             password: hash\n//         })\n//         const regiserUser = await newUser.save();\n//         res.status(200);\n//         console.log(\"Ok\")\n//     } catch (err) {\n//         console.log(err)\n//     }\n// })\n\nmodule.exports = router;","map":{"version":3,"sources":["C:/Users/domin/Documents/domcattell/site/server/routes/adminRoutes.js"],"names":["express","require","router","Router","mergeParams","user","bcrypt","jwt","checkAuth","secret","post","req","res","body","username","password","Error","findOne","loginUser","compare","matched","payload","token","sign","expiresIn","status","json","msg","message","console","log","get","select","loggedInUser","module","exports"],"mappings":"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","sourcesContent":["const express = require('express'),\r\n    router = express.Router({ mergeParams: true }),\r\n    user = require('../models/user'),\r\n    bcrypt = require('bcrypt'),\r\n    jwt = require('jsonwebtoken'),\r\n    checkAuth = require('../middleware/checkAuth');\r\n\r\nconst secret = 'secret';\r\n\r\nrouter.post('/admin/login', async (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    try {\r\n        if (!username || !password) throw Error('Please enter the fields')\r\n\r\n        //find user, print json response if not found\r\n        const loginUser = await user.findOne({ username });\r\n        if (!loginUser) throw Error('user not found')\r\n\r\n        //compare body pass with db password using bcrypt\r\n        const matched = await bcrypt.compare(password, loginUser.password);\r\n        if (!matched) throw Error('incorrect credentials')\r\n\r\n        //assign token and expiration date\r\n        const payload = { username };\r\n        const token = jwt.sign(payload, secret, {\r\n            expiresIn: '60m'\r\n        });\r\n\r\n        if (!token) throw Error('token error')\r\n\r\n        //send token as json to be used for auth in client\r\n        res.status(200).json(token);\r\n    } catch (e) {\r\n        res.status(400).json({ msg: e.message })\r\n        console.log(e.message)\r\n    }\r\n});\r\n\r\nrouter.get('/admin/user', checkAuth, async (req, res) => {\r\n    const { username } = req;\r\n    try {\r\n        const loggedInUser = await user.findOne({ username }).select('-password');\r\n        if (!loggedInUser) throw Error(\"User not found\");\r\n        res.status(200).json(username);\r\n    } catch (e) {\r\n        res.status(400).json({ msg: \"error\" });\r\n        console.log(e)\r\n    }\r\n});\r\n\r\n//register route. won't be used, and thus no error handling added\r\n// router.post(\"/admin/register\", async (req, res) => {\r\n//     const {username, password} = req.body;\r\n\r\n//     try {\r\n//         const salt = await bcrypt.genSalt(10);\r\n//         const hash = await bcrypt.hash(password, salt);\r\n\r\n//         const newUser = new user({\r\n//             username,\r\n//             password: hash\r\n//         })\r\n\r\n//         const regiserUser = await newUser.save();\r\n\r\n//         res.status(200);\r\n//         console.log(\"Ok\")\r\n//     } catch (err) {\r\n//         console.log(err)\r\n//     }\r\n// })\r\n\r\nmodule.exports = router;\r\n"]},"metadata":{},"sourceType":"script"}