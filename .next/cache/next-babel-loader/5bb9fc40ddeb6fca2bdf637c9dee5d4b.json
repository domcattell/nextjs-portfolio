{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { GET_PROJECTS, GET_PROJECT } from '../actions/types';\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case GET_PROJECTS:\n      return _objectSpread({}, state, {\n        projects: action.payload\n      });\n\n    case GET_PROJECT:\n      return _objectSpread({}, state, {\n        project: action.payload\n      });\n\n    case ADD_PROJECT:\n      return _objectSpread({}, state, {\n        projects: [...state.projects, action.payload]\n      });\n\n    case DELETE_PROJECT:\n      return _objectSpread({}, state, {\n        projects: state.projects.filter(project => project.id != action.payload)\n      });\n\n    case EDIT_PROJECT:\n      return _objectSpread({}, state);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/domin/Documents/domcattell/site/context/reducers/projects.reducer.js"],"names":["GET_PROJECTS","GET_PROJECT","reducer","state","action","type","projects","payload","project","ADD_PROJECT","DELETE_PROJECT","filter","id","EDIT_PROJECT"],"mappings":";;;;;;AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,kBAA1C;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClC,UAAQA,MAAM,CAACC,IAAf;AACC,SAAKL,YAAL;AACC,+BACIG,KADJ;AAECG,QAAAA,QAAQ,EAAEF,MAAM,CAACG;AAFlB;;AAKD,SAAKN,WAAL;AACC,+BACIE,KADJ;AAECK,QAAAA,OAAO,EAAEJ,MAAM,CAACG;AAFjB;;AAKD,SAAKE,WAAL;AACC,+BACIN,KADJ;AAECG,QAAAA,QAAQ,EAAE,CAAE,GAAGH,KAAK,CAACG,QAAX,EAAqBF,MAAM,CAACG,OAA5B;AAFX;;AAKD,SAAKG,cAAL;AACC,+BACIP,KADJ;AAECG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeK,MAAf,CAAuBH,OAAD,IAAaA,OAAO,CAACI,EAAR,IAAcR,MAAM,CAACG,OAAxD;AAFX;;AAKK,SAAKM,YAAL;AACI,+BACOV,KADP;;AAKV;AACC,aAAOA,KAAP;AAhCF;AAkCA,CAnCD;;AAqCA,eAAeD,OAAf","sourcesContent":["import { GET_PROJECTS, GET_PROJECT } from '../actions/types';\r\n\r\nconst reducer = (state, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase GET_PROJECTS:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tprojects: action.payload\r\n\t\t\t};\r\n\r\n\t\tcase GET_PROJECT:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tproject: action.payload\r\n\t\t\t};\r\n\r\n\t\tcase ADD_PROJECT:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tprojects: [ ...state.projects, action.payload ]\r\n\t\t\t};\r\n\r\n\t\tcase DELETE_PROJECT:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tprojects: state.projects.filter((project) => project.id != action.payload)\r\n            };\r\n            \r\n        case EDIT_PROJECT:\r\n            return {\r\n                ...state,\r\n                \r\n            }\r\n\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}