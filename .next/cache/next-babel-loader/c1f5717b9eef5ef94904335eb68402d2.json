{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { createContext, useReducer } from 'react';\nimport axios from 'axios';\nimport authReducer from '../reducers/auth.reducer';\nimport authToken from '../../helpers/authToken';\nimport { LOGIN_SUCCESS, LOGIN_ERROR, AUTH_ERROR, CLEAR_MSGS, LOGOUT, AUTH_SUCCESS } from '../actions/types';\nexport var AuthContext = createContext();\nexport var AuthActions = createContext();\nexport var AuthProvider = function AuthProvider(props) {\n  var init = {\n    loadingAuth: false,\n    user: \"\",\n    isAuthenticated: false,\n    authMsgs: \"\"\n  };\n\n  var _useReducer = useReducer(authReducer, init),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  var checkAuth = function checkAuth() {\n    var res;\n    return _regeneratorRuntime.async(function checkAuth$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(\"http://localhost:3000/api/admin/user\"));\n\n          case 3:\n            res = _context.sent;\n            dispatch({\n              type: AUTH_SUCCESS,\n              payload: res.data\n            });\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            dispatch({\n              type: AUTH_ERROR,\n              payload: _context.t0.response.data\n            });\n\n          case 10:\n            ;\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var loginUser = function loginUser(user) {\n    var config, res;\n    return _regeneratorRuntime.async(function loginUser$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            config = {\n              header: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context2.prev = 1;\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(axios.post(\"http://localhost:3000/api/admin/login\", user, config));\n\n          case 4:\n            res = _context2.sent;\n            dispatch({\n              type: LOGIN_SUCCESS,\n              payload: res.data\n            });\n            _context2.next = 11;\n            break;\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](1);\n            dispatch({\n              type: LOGIN_ERROR,\n              payload: _context2.t0.response.data\n            });\n\n          case 11:\n            ;\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 8]], Promise);\n  };\n\n  var logout = function logout() {\n    return dispatch({\n      type: LOGOUT\n    });\n  };\n\n  var clearMsgs = function clearMsgs() {\n    return dispatch({\n      type: CLEAR_MSGS\n    });\n  };\n\n  var actions = {\n    checkAuth: checkAuth,\n    loginUser: loginUser,\n    logout: logout,\n    clearMsgs: clearMsgs\n  };\n  return __jsx(AuthContext.Provider, {\n    value: state\n  }, __jsx(AuthActions.Provider, {\n    value: actions\n  }, props.children));\n};","map":{"version":3,"sources":["C:/Users/domin/Documents/domcattell/site/context/contexts/auth.context.js"],"names":["React","createContext","useReducer","axios","authReducer","authToken","LOGIN_SUCCESS","LOGIN_ERROR","AUTH_ERROR","CLEAR_MSGS","LOGOUT","AUTH_SUCCESS","AuthContext","AuthActions","AuthProvider","props","init","loadingAuth","user","isAuthenticated","authMsgs","state","dispatch","checkAuth","get","res","type","payload","data","response","loginUser","config","header","post","logout","clearMsgs","actions","children"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport authReducer from '../reducers/auth.reducer';\r\nimport authToken from '../../helpers/authToken';\r\nimport {\r\n    LOGIN_SUCCESS, \r\n    LOGIN_ERROR, \r\n    AUTH_ERROR, \r\n    CLEAR_MSGS, \r\n    LOGOUT,\r\n    AUTH_SUCCESS\r\n} from '../actions/types';\r\n\r\nexport const AuthContext = createContext();\r\nexport const AuthActions = createContext();\r\n\r\nexport const AuthProvider = (props) => {\r\n\r\n    const init = {\r\n        loadingAuth: false,\r\n        user: \"\",\r\n        isAuthenticated: false,\r\n        authMsgs: \"\"\r\n    };\r\n\r\n    const [state, dispatch] = useReducer(authReducer, init);\r\n\r\n    const checkAuth = async () => {\r\n        try {\r\n            const res = await axios.get(\"http://localhost:3000/api/admin/user\");\r\n            dispatch({\r\n                type: AUTH_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        } catch (e) {\r\n            dispatch({\r\n                type: AUTH_ERROR,\r\n                payload: e.response.data\r\n            });\r\n        };\r\n    };\r\n\r\n    const loginUser = async (user) => {\r\n        const config = {\r\n            header: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        };\r\n\r\n        try {\r\n            const res = await axios.post(\"http://localhost:3000/api/admin/login\", user, config);\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: res.data\r\n            });\r\n        } catch (e) {\r\n            dispatch({\r\n                type: LOGIN_ERROR,\r\n                payload: e.response.data\r\n            });\r\n        };\r\n    };\r\n\r\n    const logout = () => dispatch({type: LOGOUT});\r\n    const clearMsgs = () => dispatch({type: CLEAR_MSGS});\r\n\r\n    const actions = {\r\n        checkAuth,\r\n        loginUser,\r\n        logout,\r\n        clearMsgs\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={state}>\r\n            <AuthActions.Provider value={actions}>\r\n                {props.children}\r\n            </AuthActions.Provider>\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}